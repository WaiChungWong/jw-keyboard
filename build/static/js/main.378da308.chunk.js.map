{"version":3,"sources":["module/index.js","index.js"],"names":["passiveSupported","options","Object","defineProperty","get","window","addEventListener","error","eventOptions","passive","KeyCodes","8","9","13","16","17","18","20","27","32","37","38","39","40","48","49","50","51","52","53","54","55","56","57","59","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","93","96","97","98","99","100","101","102","103","104","105","106","107","109","110","111","186","187","188","189","190","191","192","219","221","220","222","224","Keyboard","container","classCallCheck","this","preventDefault","preventHoldDownEvent","keyCodesPressed","downEvents","upEvents","_keyDown","bind","_keyUp","_blur","attach","event","events","_this","push","_removeEvent","index","indexOf","splice","updateListeners","eventParams","i","length","keyboard","keyCode","which","newKeyPressed","_fireEvent","element","tagName","tabIndex","listenElement","removeEventListener","removeAttribute","downEvent","_addEvent","upEvent","pressed","Demo","props","possibleConstructorReturn","getPrototypeOf","call","state","setState","_this2","demo","onKeyDown","e","_updateKeyboard","onKeyUp","detach","_this3","react_default","a","createElement","ref","d","id","className","map","key","Component","render","src_Demo","document","getElementById"],"mappings":"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","file":"static/js/main.378da308.chunk.js","sourcesContent":["/** Detecting option support */\nlet passiveSupported = false;\n\ntry {\n  let options = Object.defineProperty({}, \"passive\", {\n    get: () => (passiveSupported = true)\n  });\n\n  window.addEventListener(\"test\", null, options);\n} catch (error) {}\n\nconst eventOptions = passiveSupported ? { passive: true } : false;\n\nclass Keyboard {\n  constructor(container) {\n    /* Whether the keyboard skips the default behaviours upon the listen element. */\n    this.preventDefault = false;\n\n    /* Whether the keyboard skips any further key down event after the first one. */\n    this.preventHoldDownEvent = false;\n\n    /* The list of key codes of the keys that has been pressed. */\n    this.keyCodesPressed = [];\n\n    /* The list of listeners this keyboard is appended to.\n     * Each keyboard event will trigger the corresponding method of each listeners. */\n    this.downEvents = [];\n    this.upEvents = [];\n\n    /* Add bindings to all event methods to secure scoping. */\n    this._keyDown = this._keyDown.bind(this);\n    this._keyUp = this._keyUp.bind(this);\n    this._blur = this._blur.bind(this);\n\n    /* Append the keyboard to the container if given */\n    if (container) {\n      this.attach(container);\n    }\n  }\n\n  /** Generic function for adding events. */\n  _addEvent(event, events) {\n    if (typeof event === \"function\") {\n      events.push(event);\n    }\n\n    return () => this._removeEvent(event, events);\n  }\n\n  /** Generic function for removing events. */\n  _removeEvent(event, events) {\n    const index = events.indexOf(event);\n\n    if (index !== -1) {\n      events.splice(index, 1);\n    }\n\n    this.updateListeners();\n  }\n\n  /** Generic function for firing events. */\n  _fireEvent(events, eventParams) {\n    for (let i = 0; i < events.length; i++) {\n      events[i](eventParams);\n    }\n  }\n\n  /** When a key is pressed. */\n  _keyDown(event) {\n    /* Put keyboard as a reference in the event. */\n    event.keyboard = this;\n\n    /* Skip the default behaviours upon this event. */\n    if (this.preventDefault === true) {\n      event.preventDefault();\n    }\n\n    let keyCode = event.which || event.keyCode;\n    let newKeyPressed = this.keyCodesPressed.indexOf(keyCode) === -1;\n\n    /* Add a new key pressed to the key pressed list. */\n    if (newKeyPressed) {\n      this.keyCodesPressed.push(keyCode);\n    }\n\n    if (newKeyPressed || !this.preventHoldDownEvent) {\n      /* Perform action for down event. */\n      this._fireEvent(this.downEvents, event);\n    }\n  }\n\n  /** When a key is released. */\n  _keyUp(event) {\n    /* Put keyboard as a reference in the event. */\n    event.keyboard = this;\n\n    /* Skip the default behaviours upon this event. */\n    if (this.preventDefault === true) {\n      event.preventDefault();\n    }\n\n    let keyCode = event.which || event.keyCode;\n    let index = this.keyCodesPressed.indexOf(keyCode);\n\n    /* Remove the key from the key pressed list. */\n    if (index !== -1) {\n      this.keyCodesPressed.splice(index, 1);\n    }\n\n    /* Perform action for up event. */\n    this._fireEvent(this.upEvents, event);\n  }\n\n  /** When the attached container lost focus. */\n  _blur(event) {\n    /* Put keyboard as a reference in the event. */\n    event.keyboard = this;\n\n    /* Skip the default behaviours upon this event. */\n    if (this.preventDefault === true) {\n      event.preventDefault();\n    }\n\n    this.keyCodesPressed = [];\n\n    /* Perform action for up event. */\n    this._fireEvent(this.upEvents, event);\n  }\n\n  /** Append the keyboard to the a DOM element and event handlers to it. */\n  attach(element) {\n    if (element.tagName !== \"INPUT\" && element.tabIndex < 0) {\n      element.tabIndex = -1;\n    }\n\n    /* Store a reference of the DOM element. */\n    this.listenElement = element;\n\n    /* Engage the essential keyboard events to each corresponding handler. */\n    element.addEventListener(\"keydown\", this._keyDown, eventOptions);\n    element.addEventListener(\"keyup\", this._keyUp, eventOptions);\n    element.addEventListener(\"blur\", this._blur, eventOptions);\n  }\n\n  /** Detach the keyboard from DOM element and event handlers from it. */\n  detach() {\n    /* Detach all the keyboard events from each corresponding handler. */\n    if (this.listenElement && this.listenElement.removeEventListener) {\n      let element = this.listenElement;\n\n      element.removeEventListener(\"keydown\", this._keyDown, eventOptions);\n      element.removeEventListener(\"keyup\", this._keyUp, eventOptions);\n      element.removeEventListener(\"blur\", this._blur, eventOptions);\n\n      if (element.tagName !== \"INPUT\" && element.tabIndex < 0) {\n        element.removeAttribute(\"tabIndex\");\n      }\n\n      /* Remove the reference of the DOM element. */\n      this.listenElement = null;\n    }\n  }\n\n  /** Toggle value for keyboard prevent default on all events. */\n  setPreventDefault(preventDefault) {\n    this.preventDefault = preventDefault;\n  }\n\n  /** Toggle value for keyboard skipping further key down events. */\n  setPreventHoldDownEvent(preventHoldDownEvent) {\n    this.preventHoldDownEvent = preventHoldDownEvent;\n  }\n\n  /** Bind an event handler to the key down event. */\n  onKeyDown(downEvent) {\n    return this._addEvent(downEvent, this.downEvents);\n  }\n\n  /** Unbind an event handler to the key down event. */\n  removeKeyDown(downEvent) {\n    return this._removeEvent(downEvent, this.downEvents);\n  }\n\n  /** Unbind all event handlers from the key down event. */\n  clearKeyDown() {\n    this.downEvents = [];\n  }\n\n  /** Bind an event handler to the key up event. */\n  onKeyUp(upEvent) {\n    return this._addEvent(upEvent, this.upEvents);\n  }\n\n  /** Unbind an event handler to the key up event. */\n  removeKeyUp(upEvent) {\n    return this._removeEvent(upEvent, this.upEvents);\n  }\n\n  /** Unbind all event handlers from the key up event. */\n  clearKeyUp() {\n    this.upEvents = [];\n  }\n\n  /** Checks if a given keyCode has been pressed. */\n  hasKeyPressed(keyCode) {\n    return this.keyCodesPressed.indexOf(keyCode) !== -1;\n  }\n\n  /** Get the last keyCode that has been pressed. */\n  getLastKeyPressed() {\n    const { keyCodesPressed: pressed } = this;\n\n    return pressed.length > 0 ? pressed[pressed.length - 1] : null;\n  }\n}\n\n/* Introduce key name to key codes mapping. */\nexport const Keys = {\n  BACKSPACE_DELETE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  CAPSLOCK: 20,\n  ESCAPE: 27,\n  SPACE_BAR: 32,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  0: 48,\n  1: 49,\n  2: 50,\n  3: 51,\n  4: 52,\n  5: 53,\n  6: 54,\n  7: 55,\n  8: 56,\n  9: 57,\n  SEMICOLON_FIREFOX: 59,\n  A: 65,\n  B: 66,\n  C: 67,\n  D: 68,\n  E: 69,\n  F: 70,\n  G: 71,\n  H: 72,\n  I: 73,\n  J: 74,\n  K: 75,\n  L: 76,\n  M: 77,\n  N: 78,\n  O: 79,\n  P: 80,\n  Q: 81,\n  R: 82,\n  S: 83,\n  T: 84,\n  U: 85,\n  V: 86,\n  W: 87,\n  X: 88,\n  Y: 89,\n  Z: 90,\n  META_LEFT: 91,\n  META_RIGHT: 93,\n  NUMPAD_0: 96,\n  NUMPAD_1: 97,\n  NUMPAD_2: 98,\n  NUMPAD_3: 99,\n  NUMPAD_4: 100,\n  NUMPAD_5: 101,\n  NUMPAD_6: 102,\n  NUMPAD_7: 103,\n  NUMPAD_8: 104,\n  NUMPAD_9: 105,\n  NUMPAD_MULTIPLY: 106,\n  NUMPAD_ADD: 107,\n  NUMPAD_SUBTRACT: 109,\n  NUMPAD_DECIMAL_POINT: 110,\n  NUMPAD_DIVIDE: 111,\n  SEMICOLON: 186,\n  EQUAL: 187,\n  COMMA: 188,\n  MINUS: 189,\n  PERIOD: 190,\n  SLASH: 191,\n  BACK_QUOTE: 192,\n  BRACKET_LEFT: 219,\n  BACK_SLASH: 220,\n  BRACKET_RIGHT: 221,\n  QUOTE: 222,\n  META_FIREFOX: 224\n};\n\n/* Introduce key codes to key name mapping. */\nexport const KeyCodes = {\n  8: \"BACKSPACE/DELETE\",\n  9: \"TAB\",\n  13: \"ENTER\",\n  16: \"SHIFT\",\n  17: \"CTRL\",\n  18: \"ALT\",\n  20: \"CAPSLOCK\",\n  27: \"ESCAPE\",\n  32: \"SPACE BAR\",\n  37: \"LEFT\",\n  38: \"UP\",\n  39: \"RIGHT\",\n  40: \"DOWN\",\n  48: \"0\",\n  49: \"1\",\n  50: \"2\",\n  51: \"3\",\n  52: \"4\",\n  53: \"5\",\n  54: \"6\",\n  55: \"7\",\n  56: \"8\",\n  57: \"9\",\n  59: \"SEMICOLON (FIREFOX)\",\n  65: \"A\",\n  66: \"B\",\n  67: \"C\",\n  68: \"D\",\n  69: \"E\",\n  70: \"F\",\n  71: \"G\",\n  72: \"H\",\n  73: \"I\",\n  74: \"J\",\n  75: \"K\",\n  76: \"L\",\n  77: \"M\",\n  78: \"N\",\n  79: \"O\",\n  80: \"P\",\n  81: \"Q\",\n  82: \"R\",\n  83: \"S\",\n  84: \"T\",\n  85: \"U\",\n  86: \"V\",\n  87: \"W\",\n  88: \"X\",\n  89: \"Y\",\n  90: \"Z\",\n  91: \"META LEFT\",\n  93: \"META RIGHT\",\n  96: \"NUMPAD 0\",\n  97: \"NUMPAD 1\",\n  98: \"NUMPAD 2\",\n  99: \"NUMPAD 3\",\n  100: \"NUMPAD 4\",\n  101: \"NUMPAD 5\",\n  102: \"NUMPAD 6\",\n  103: \"NUMPAD 7\",\n  104: \"NUMPAD 8\",\n  105: \"NUMPAD 9\",\n  106: \"NUMPAD MULTIPLY\",\n  107: \"NUMPAD ADD\",\n  109: \"NUMPAD SUBTRACT\",\n  110: \"NUMPAD DECIMAL POINT\",\n  111: \"NUMPAD DIVIDE\",\n  186: \"SEMICOLON\",\n  187: \"EQUAL\",\n  188: \"COMMA\",\n  189: \"SUBTRACT\",\n  190: \"PERIOD\",\n  191: \"SLASH\",\n  192: \"BACK QUOTE\",\n  219: \"BRACKET LEFT\",\n  221: \"BRACKET RIGHT\",\n  220: \"BACK SLASH\",\n  222: \"QUOTE\",\n  224: \"META (FIREFOX)\"\n};\n\nexport default Keyboard;\n","import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\n\nimport Keyboard, { KeyCodes } from \"./module\";\n\nimport \"./style.css\";\n\nclass Demo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.keyboard = new Keyboard();\n\n    this.state = { keyCodesPressed: [] };\n  }\n\n  _updateKeyboard(keyboard) {\n    const { keyCodesPressed } = keyboard;\n    this.setState({ keyCodesPressed });\n  }\n\n  componentDidMount() {\n    this.keyboard.attach(this.demo);\n\n    this.keyboard.onKeyDown(e => this._updateKeyboard(e.keyboard));\n    this.keyboard.onKeyUp(e => this._updateKeyboard(e.keyboard));\n  }\n\n  componentWillUnmount() {\n    this.keyboard.detach();\n  }\n\n  render() {\n    const { keyCodesPressed } = this.state;\n\n    return (\n      <div ref={d => (this.demo = d)} id=\"demo\">\n        <div className=\"title\">Press any keys to get the keycode</div>\n        {keyCodesPressed.map(key => (\n          <div key={key} className=\"key\">\n            {KeyCodes[key]}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nrender(<Demo />, document.getElementById(\"root\"));\n"],"sourceRoot":""}